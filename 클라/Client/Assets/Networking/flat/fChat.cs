// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::FlatBuffers;

public struct fChat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static fChat GetRootAsfChat(ByteBuffer _bb) { return GetRootAsfChat(_bb, new fChat()); }
  public static fChat GetRootAsfChat(ByteBuffer _bb, fChat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public fChat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Class CType { get { int o = __p.__offset(4); return o != 0 ? (Class)__p.bb.GetInt(o + __p.bb_pos) : Class.Base; } }
  public int PID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Str { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetStrBytes() { return __p.__vector_as_arraysegment(8); }

  public static Offset<fChat> CreatefChat(FlatBufferBuilder builder,
      Class cType = Class.Base,
      int pID = 0,
      StringOffset strOffset = default(StringOffset)) {
    builder.StartObject(3);
    fChat.AddStr(builder, strOffset);
    fChat.AddPID(builder, pID);
    fChat.AddCType(builder, cType);
    return fChat.EndfChat(builder);
  }

  public static void StartfChat(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddCType(FlatBufferBuilder builder, Class cType) { builder.AddInt(0, (int)cType, 0); }
  public static void AddPID(FlatBufferBuilder builder, int pID) { builder.AddInt(1, pID, 0); }
  public static void AddStr(FlatBufferBuilder builder, StringOffset strOffset) { builder.AddOffset(2, strOffset.Value, 0); }
  public static Offset<fChat> EndfChat(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<fChat>(o);
  }
};

